
// linked list 
// A complete working C++ program to
// demonstrate deletion in singly 
#include <iostream>
 
using namespace std;

enum ELevel {
  SELL,
  BUY,
  WAIT
};

struct node
{
    double price;
    double volume;
    ELevel  status;
    node *next;
};
 
class linked_list
{
private:
    node *head,*tail;
public:
    linked_list()
    {
        head = NULL;
        tail = NULL;
    }
 
    void add_node(double n, double volume, ELevel status )
    {
        node *tmp = new node;
        tmp->price = n;
        tmp->volume = volume;
        tmp->next = NULL;
 
        if(head == NULL)
        {
            head = tmp;
            tail = tmp;
        }
        else
        {
            tail->next = tmp;
            tail = tail->next;
        }
    }
 
    node* gethead()
    {
        return head;
    }
 
    static void display(node *head)
    {
        if(head == NULL)
        {
            cout << "NULL" << endl;
        }
        else
        {
            cout << head->price << " vol" << head->volume << ";" << head->status << endl;
            display(head->next);
        }
    }
 
    static void concatenate(node *a,node *b)
    {
        if( a != NULL && b!= NULL )
        {
            if (a->next == NULL)
                a->next = b;
            else
                concatenate(a->next,b);
        }
        else
        {
            cout << "Either a or b is NULL\n";
        }
    }
 
    void front(double price, double volume, ELevel status )
    {
        node *tmp = new node;
        tmp -> price = price;
        tmp -> volume = volume;
        tmp -> next = head;
        head = tmp;
    }
 
    void after(node *a, double price, double volume, ELevel status)
    {
        node* p = new node;
        p->price = price;
        p->next = a->next;
        a->next = p;
    }
 
    void del (node *before_del)
    {
        node* temp;
        temp = before_del->next;
        before_del->next = temp->next;
        delete temp;
    }
};
 
int main()
{
    linked_list a;
    a.add_node(1,100, BUY);
    a.add_node(2,200, BUY);
    a.front(3,300, BUY);
    a.add_node(5,500, BUY);
    a.add_node(15,150, BUY);
    linked_list::display(a.gethead());
    a.after(a.gethead()->next->next->next, 10,100, BUY); 
    a.del(a.gethead()->next);
    linked_list::display(a.gethead());
    return 0;
}
//contribute
